import numpy as np
from typing import List, Dict, Any, Tuple
from rank_bm25 import BM25Okapi
import re
import logging
import asyncio
import concurrent.futures

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


class HybridSearch:
    """
    –†–µ–∞–ª–∏–∑—É–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫, –∫–æ–º–±–∏–Ω–∏—Ä—É—è:
    1. –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ)
    2. BM25 –ø–æ–∏—Å–∫ (–ª–µ–∫—Å–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É sync/async —Ä–µ–∂–∏–º–∞–º–∏.
    """

    def __init__(self, vector_store, documents: List[Dict[str, Any]]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫.

        Args:
            vector_store: FAISS –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            documents: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è BM25 –∏–Ω–¥–µ–∫—Å–∞
        """
        self.vector_store = vector_store
        self.documents = documents

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫...")

        self.corpus_tokens = []
        for doc in documents:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è BM25
            text = doc.get('full_text', '') + ' ' + doc.get('name', '')
            tokens = self._tokenize(text)
            self.corpus_tokens.append(tokens)

        # –°—Ç—Ä–æ–∏–º BM25 –∏–Ω–¥–µ–∫—Å
        logger.info(f"–°—Ç—Ä–æ–∏–º BM25 –∏–Ω–¥–µ–∫—Å –∏–∑ {len(self.corpus_tokens)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        self.bm25 = BM25Okapi(self.corpus_tokens)

        logger.info("‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤!")

    def _tokenize(self, text: str) -> List[str]:
        """
        –¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è BM25.
        –ü—Ä–æ—Å—Ç–∞—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.

        Args:
            text: –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç

        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
        """
        if not text:
            return []

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        text = text.lower()

        # –ó–∞–º–µ–Ω—è–µ–º –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'[-_]', ' ', text)

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)
        text = re.sub(r'[^\w\s]', ' ', text, flags=re.UNICODE)

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ç–æ–∫–µ–Ω—ã
        tokens = text.split()

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–æ–∫–µ–Ω—ã
        tokens = [token for token in tokens if len(token) >= 2]

        return tokens

    def vector_search(self, query_embedding: np.ndarray, k: int) -> List[Tuple[Dict[str, Any], float]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫.

        Args:
            query_embedding: –≠–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
            k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ (–¥–æ–∫—É–º–µ–Ω—Ç, —Å–∫–æ—Ä)
        """
        return self.vector_store.search(query_embedding, k)

    def _bm25_search_sync(self, query: str, k: int) -> List[Tuple[Dict[str, Any], float]]:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ BM25 –ø–æ–∏—Å–∫–∞.

        Args:
            query: –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ (–¥–æ–∫—É–º–µ–Ω—Ç, —Å–∫–æ—Ä)
        """
        # –¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        query_tokens = self._tokenize(query)

        if not query_tokens:
            return []

        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä—ã BM25
        scores = self.bm25.get_scores(query_tokens)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–∫–æ—Ä–∞
        scored_docs = [(i, score) for i, score in enumerate(scores)]
        scored_docs.sort(key=lambda x: x[1], reverse=True)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-k —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = []
        for i, (doc_idx, score) in enumerate(scored_docs[:k]):
            if score > 0:  # –¢–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Å–∫–æ—Ä–æ–º
                doc = self.documents[doc_idx].copy()
                results.append((doc, float(score)))

        return results

    def bm25_search(self, query: str, k: int) -> List[Tuple[Dict[str, Any], float]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç BM25 –ø–æ–∏—Å–∫.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç sync/async –∫–æ–Ω—Ç–µ–∫—Å—Ç.

        Args:
            query: –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ (–¥–æ–∫—É–º–µ–Ω—Ç, —Å–∫–æ—Ä)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ running event loop
            loop = asyncio.get_running_loop()
            # –ï—Å–ª–∏ –µ—Å—Ç—å loop, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ executor
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(self._bm25_search_sync, query, k)
                return future.result()
        except RuntimeError:
            # –ù–µ—Ç event loop - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            return self._bm25_search_sync(query, k)

    def _vector_search_sync(self, query_embedding: np.ndarray, k: int) -> List[Tuple[Dict[str, Any], float]]:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
        """
        return self.vector_store.search(query_embedding, k)

    def _normalize_and_combine_scores(
        self,
        vector_results: List[Tuple[Dict[str, Any], float]],
        bm25_results: List[Tuple[Dict[str, Any], float]],
        alpha: float,
        k: int
    ) -> List[Tuple[Dict[str, Any], float]]:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ–≤.

        Args:
            vector_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            bm25_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã BM25 –ø–æ–∏—Å–∫–∞
            alpha: –í–µ—Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ (–¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π_—Å–∫–æ—Ä)
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∫–æ—Ä—ã –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        combined_scores = {}

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —Å–∫–æ—Ä—ã (–∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —É–∂–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-1, 1])
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 1]
        if vector_results:
            max_vector_score = max(score for _, score in vector_results)
            min_vector_score = min(score for _, score in vector_results)
            vector_range = max_vector_score - min_vector_score if max_vector_score > min_vector_score else 1.0

            for doc, score in vector_results:
                doc_id = doc.get('id', str(hash(doc['name'])))
                normalized_score = (score - min_vector_score) / vector_range
                combined_scores[doc_id] = {
                    'document': doc,
                    'vector_score': normalized_score,
                    'bm25_score': 0.0
                }

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º BM25 —Å–∫–æ—Ä—ã
        if bm25_results:
            max_bm25_score = max(score for _, score in bm25_results)

            for doc, score in bm25_results:
                doc_id = doc.get('id', str(hash(doc['name'])))
                normalized_score = score / max_bm25_score if max_bm25_score > 0 else 0.0

                if doc_id in combined_scores:
                    combined_scores[doc_id]['bm25_score'] = normalized_score
                else:
                    combined_scores[doc_id] = {
                        'document': doc,
                        'vector_score': 0.0,
                        'bm25_score': normalized_score
                    }

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ—Ä—ã
        final_results = []
        for doc_id, scores in combined_scores.items():
            combined_score = (
                alpha * scores['vector_score'] + 
                (1 - alpha) * scores['bm25_score']
            )
            final_results.append((scores['document'], combined_score))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫–æ—Ä–∞
        final_results.sort(key=lambda x: x[1], reverse=True)

        return final_results[:k]

    def _hybrid_search_sync(
        self,
        query: str,
        query_embedding: np.ndarray,
        k: int,
        alpha: float
    ) -> List[Tuple[Dict[str, Any], float]]:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
        """
        logger.info(f"üîç –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫: '{query}' (Œ±={alpha})")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –æ–±–æ–∏—Ö –º–µ—Ç–æ–¥–æ–≤
        search_k = min(k * 2, len(self.documents))

        vector_results = self._vector_search_sync(query_embedding, search_k)
        bm25_results = self._bm25_search_sync(query, search_k)

        logger.info(f"  üìä –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫: {len(vector_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        logger.info(f"  üìä BM25 –ø–æ–∏—Å–∫: {len(bm25_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        final_results = self._normalize_and_combine_scores(
            vector_results, bm25_results, alpha, k
        )

        logger.info(f"  ‚úÖ –ò—Ç–æ–≥–æ: {len(final_results)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        return final_results

    def hybrid_search(
        self, 
        query: str, 
        query_embedding: np.ndarray, 
        k: int = 10,
        alpha: float = 0.6
    ) -> List[Tuple[Dict[str, Any], float]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫, –∫–æ–º–±–∏–Ω–∏—Ä—É—è –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏ BM25 –ø–æ–∏—Å–∫.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç sync/async –∫–æ–Ω—Ç–µ–∫—Å—Ç.

        Args:
            query: –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            query_embedding: –≠–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
            k: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            alpha: –í–µ—Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (0.0-1.0), BM25 –≤–µ—Å–∏—Ç (1-alpha)

        Returns:
            –°–ø–∏—Å–æ–∫ (–¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π_—Å–∫–æ—Ä) –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–∫–æ—Ä–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ running event loop
            loop = asyncio.get_running_loop()
            # –ï—Å–ª–∏ –µ—Å—Ç—å loop, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ executor
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(
                    self._hybrid_search_sync,
                    query,
                    query_embedding,
                    k,
                    alpha
                )
                return future.result()
        except RuntimeError:
            # –ù–µ—Ç event loop - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            return self._hybrid_search_sync(query, query_embedding, k, alpha)

