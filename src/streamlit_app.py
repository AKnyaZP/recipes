"""
Streamlit UI –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ RAG-–ø–∞–π–ø–ª–∞–π–Ω–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤.
–ó–∞–ø—É—Å–∫: streamlit run streamlit_app.py --server.port 8501
"""

import os
import traceback
import asyncio
from typing import Optional
import streamlit as st
from rag.rag_pipeline import RecipeRAGPipeline
import logging


st.set_page_config(page_title="Recipes RAG", layout="centered")


# ----- Async helper –¥–ª—è Streamlit -----
def run_async(coro):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Streamlit.
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π event loop –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
    """
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    return loop.run_until_complete(coro)


# ----- Pipeline helper -----
@st.cache_resource
def get_pipeline():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞–π–ø–ª–∞–π–Ω–∞ (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è)."""
    return RecipeRAGPipeline()


def ensure_init_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ session_state."""
    if "pipeline_initialized" not in st.session_state:
        st.session_state["pipeline_initialized"] = False
    if "init_error" not in st.session_state:
        st.session_state["init_error"] = None
    if "auto_init_done" not in st.session_state:
        st.session_state["auto_init_done"] = False


def initialize_pipeline():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω —Å UI feedback (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞)."""
    pipeline = get_pipeline()

    try:
        progress_bar = st.progress(0, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–º–±–µ–¥–¥–µ—Ä–∞...")
        run_async(pipeline.setup_embeddings())

        progress_bar.progress(20, text="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        run_async(pipeline.load_and_process_data(max_recipes=200))

        progress_bar.progress(40, text="–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...")
        run_async(pipeline.build_vector_index(force_rebuild=False))

        progress_bar.progress(60, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        run_async(pipeline.setup_hybrid_search())

        progress_bar.progress(70, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Ä–∞–Ω–∫–µ—Ä–∞...")
        run_async(pipeline.setup_reranker())

        progress_bar.progress(90, text="–ó–∞–≥—Ä—É–∑–∫–∞ LLM...")
        run_async(pipeline.setup_llm())

        progress_bar.progress(100, text="‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        st.session_state["pipeline_initialized"] = True
        st.session_state["init_error"] = None
        st.success("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

    except Exception as e:
        st.session_state["init_error"] = traceback.format_exc()
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
        with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏"):
            st.code(st.session_state["init_error"])


# ----- Main UI -----
ensure_init_state()

st.title("üçΩÔ∏è –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å RAG")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if not st.session_state.get("auto_init_done"):
    st.info("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã (—ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)...")
    initialize_pipeline()
    st.session_state["auto_init_done"] = True
    st.rerun()

pipeline = get_pipeline()
pipeline_ready = (
    st.session_state.get("pipeline_initialized", False) and
    hasattr(pipeline, 'embedder') and pipeline.embedder and
    hasattr(pipeline, 'hybrid_search') and pipeline.hybrid_search and
    hasattr(pipeline, 'llm') and pipeline.llm
)

st.markdown("---")

query = st.text_input(
    "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:",
    value="–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?",
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–µ—Ü–µ–ø—Ç –ø–∏—Ü—Ü—ã —Å –≥—Ä–∏–±–∞–º–∏",
    disabled=not pipeline_ready
)

search_button = st.button(
    "üîé –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã",
    type="primary",
    disabled=not pipeline_ready,
    use_container_width=True
)

if not pipeline_ready:
    st.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –µ—â—ë –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

if search_button and pipeline_ready:
    if query.strip():
        with st.spinner("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
            try:
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ run_async
                result = run_async(pipeline.ask(query))

                # –û—Ç–≤–µ—Ç LLM
                st.markdown("### üí¨ –û—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã")
                st.write(result.get("answer", ""))

                # –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
                st.markdown("### üìö –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã")
                search_results = result.get("search_results", [])

                if search_results:
                    for i, item in enumerate(search_results, start=1):
                        with st.expander(
                            f"{i}. {item.get('name', '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)')} ‚Äî —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {item.get('relevance_score', 0):.3f}"
                        ):
                            st.markdown(f"**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
                            st.text(item.get('ingredients', '–ù–µ —É–∫–∞–∑–∞–Ω—ã'))

                            if item.get('url'):
                                st.markdown(f"**–°—Å—ã–ª–∫–∞:** [{item.get('url')}]({item.get('url')})")
                else:
                    st.info("–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                with st.expander("‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
                    timing = result.get("timing", {})
                    col1, col2 = st.columns(2)
                    col1.metric("–û–±—â–µ–µ –≤—Ä–µ–º—è", f"{timing.get('total_time', 0):.2f}—Å")
                    col2.metric("–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞", f"{timing.get('search_time', 0):.2f}—Å")

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏"):
                    st.code(traceback.format_exc())
    else:
        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")

# –°—Ç–∞—Ç—É—Å –≤ —Ñ—É—Ç–µ—Ä–µ
st.markdown("---")
with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"):
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        if hasattr(pipeline, 'documents') and pipeline.documents:
            st.metric("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤", len(pipeline.documents))
        else:
            st.metric("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤", "0")

    with col2:
        if hasattr(pipeline, 'vector_store') and pipeline.vector_store:
            st.metric("FAISS –∏–Ω–¥–µ–∫—Å", "‚úÖ")
        else:
            st.metric("FAISS –∏–Ω–¥–µ–∫—Å", "‚ùå")

    with col3:
        if hasattr(pipeline, 'reranker') and pipeline.reranker:
            st.metric("–†–µ—Ä–∞–Ω–∫–µ—Ä", "‚úÖ")
        else:
            st.metric("–†–µ—Ä–∞–Ω–∫–µ—Ä", "‚ùå")

    with col4:
        if hasattr(pipeline, 'llm') and pipeline.llm:
            st.metric("LLM", "‚úÖ")
        else:
            st.metric("LLM", "‚ùå")

# –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    if st.button("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É", use_container_width=True):
        st.session_state["pipeline_initialized"] = False
        st.session_state["auto_init_done"] = False
        st.cache_resource.clear()
        st.rerun()

    st.markdown("---")
    st.markdown("### üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")

    status_items = [
        ("–≠–º–±–µ–¥–¥–µ—Ä", hasattr(pipeline, 'embedder') and pipeline.embedder),
        ("–í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å", hasattr(pipeline, 'vector_store') and pipeline.vector_store),
        ("–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫", hasattr(pipeline, 'hybrid_search') and pipeline.hybrid_search),
        ("–†–µ—Ä–∞–Ω–∫–µ—Ä", hasattr(pipeline, 'reranker') and pipeline.reranker),
        ("LLM", hasattr(pipeline, 'llm') and pipeline.llm),
    ]

    for name, status in status_items:
        st.markdown(f"{'‚úÖ' if status else '‚ùå'} {name}")
