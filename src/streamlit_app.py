"""
Streamlit UI –¥–ª—è RAG —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å T-one ASR –æ—Ç –¢-–ë–∞–Ω–∫–∞.
–ó–∞–ø—É—Å–∫: streamlit run streamlit_app.py
"""

import traceback
import streamlit as st
from rag.rag_pipeline import RecipeRAGPipeline
from streamlit_mic_recorder import mic_recorder

st.set_page_config(
    page_title="–†–µ—Ü–µ–ø—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º üéôÔ∏è",
    layout="centered",
    page_icon="üçΩÔ∏è"
)


# ===== Pipeline –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ =====
@st.cache_resource(show_spinner="üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã...")
def get_pipeline(max_recipes: int = 200):
    """–°–æ–∑–¥–∞—ë—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç RAG pipeline (–æ–¥–∏–Ω —Ä–∞–∑)."""
    pipeline = RecipeRAGPipeline()
    pipeline.initialize_full_pipeline(max_recipes=max_recipes, force_rebuild=False)
    return pipeline


# ===== T-one ASR –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ =====
@st.cache_resource(show_spinner="üé§ –ó–∞–≥—Ä—É–∑–∫–∞ T-one –º–æ–¥–µ–ª–∏ (70M)...")
def get_asr():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç T-one ASR –º–æ–¥–µ–ª—å –æ—Ç –¢-–ë–∞–Ω–∫–∞."""
    try:
        from asr.asr import ToneASR
        asr = ToneASR(device="auto")
        return asr
    except Exception as e:
        st.warning(f"‚ö†Ô∏è T-one –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        st.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install transformers torch torchaudio soundfile")
        return None


# ===== –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ =====
def process_query(pipeline, query_text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    with st.spinner("üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤..."):
        try:
            result = pipeline.ask(query_text)

            # –û—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã
            st.markdown("### üí¨ –û—Ç–≤–µ—Ç")
            st.write(result.get("answer", ""))

            # –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
            st.markdown("### üìö –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã")
            search_results = result.get("search_results", [])

            if search_results:
                for i, item in enumerate(search_results, start=1):
                    relevance = item.get('relevance_score', 0)
                    name = item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

                    with st.expander(f"{i}. {name} ‚Äî —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.3f}"):
                        st.markdown("**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
                        st.text(item.get('ingredients', '–ù–µ —É–∫–∞–∑–∞–Ω—ã'))

                        url = item.get('url')
                        if url:
                            st.markdown(f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—Ü–µ–ø—Ç—É]({url})")
            else:
                st.info("–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            with st.expander("‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
                timing = result.get("timing", {})
                col1, col2 = st.columns(2)
                col1.metric("–û–±—â–µ–µ –≤—Ä–µ–º—è", f"{timing.get('total_time', 0):.2f}—Å")
                col2.metric("–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞", f"{timing.get('search_time', 0):.2f}—Å")

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            with st.expander("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                st.code(traceback.format_exc())


# ===== MAIN UI =====
st.title("üçΩÔ∏è –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤")
st.caption("üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ | üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–∏—Å–∫ —Å T-one –æ—Ç –¢-–ë–∞–Ω–∫–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
try:
    pipeline = get_pipeline(max_recipes=200)
    asr = get_asr()
    pipeline_ready = True

    # –°—Ç–∞—Ç—É—Å –≤ sidebar
    with st.sidebar:
        st.success("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
        if asr:
            st.success("‚úÖ T-one ASR –≥–æ—Ç–æ–≤")
        else:
            st.warning("‚ö†Ô∏è ASR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

except Exception as e:
    pipeline_ready = False
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏"):
        st.code(traceback.format_exc())

st.markdown("---")

# ===== –í–ö–õ–ê–î–ö–ò =====
if pipeline_ready:
    tab1, tab2 = st.tabs(["üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥", "üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥"])

    # ===== –í–ö–õ–ê–î–ö–ê 1: –¢–µ–∫—Å—Ç =====
    with tab1:
        query = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:",
            value="",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â",
            key="text_query"
        )

        if st.button("üîé –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã", type="primary", use_container_width=True):
            if query.strip():
                process_query(pipeline, query)
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")

    # ===== –í–ö–õ–ê–î–ö–ê 2: –ì–æ–ª–æ—Å =====
    with tab2:
        if not asr:
            st.warning("‚ö†Ô∏è T-one ASR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            st.info(
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:\n"
                "```bash\n"
                "pip install transformers torch torchaudio soundfile librosa\n"
                "```"
            )
        else:
            st.markdown("### üéôÔ∏è –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            st.caption("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è T-one –æ—Ç –¢-–ë–∞–Ω–∫–∞ (70M –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, open source)")

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏
            audio = mic_recorder(
                start_prompt="üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å",
                stop_prompt="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                format="wav",
                use_container_width=True,
                key='voice_recorder'
            )

            if audio:
                st.audio(audio['bytes'], format='audio/wav')

                col1, col2 = st.columns([3, 1])

                with col1:
                    if st.button("üîä –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –Ω–∞–π—Ç–∏", type="primary", use_container_width=True):
                        with st.spinner("üéß –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä–µ—á—å —á–µ—Ä–µ–∑ T-one..."):
                            try:
                                # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —á–µ—Ä–µ–∑ T-one
                                result_asr = asr.transcribe_bytes(
                                    audio['bytes'],
                                    sample_rate=audio.get('sample_rate', 16000)
                                )

                                if result_asr.get('success') and result_asr.get('text'):
                                    recognized_text = result_asr['text']
                                    st.success(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: **{recognized_text}**")

                                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
                                    process_query(pipeline, recognized_text)

                                else:
                                    error_msg = result_asr.get('error', '–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞')
                                    st.error(f"‚ùå {error_msg}")

                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ ASR: {str(e)}")
                                with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"):
                                    st.code(traceback.format_exc())

                with col2:
                    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True):
                        st.rerun()

# ===== FOOTER =====
st.markdown("---")

with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"):
    if pipeline_ready:
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            docs = len(pipeline.documents) if hasattr(pipeline, 'documents') else 0
            st.metric("–†–µ—Ü–µ–ø—Ç–æ–≤", docs)

        with col2:
            faiss = "‚úÖ" if hasattr(pipeline, 'vector_store') and pipeline.vector_store else "‚ùå"
            st.metric("FAISS –∏–Ω–¥–µ–∫—Å", faiss)

        with col3:
            asr_status = "‚úÖ" if asr else "‚ùå"
            st.metric("T-one ASR", asr_status)

        with col4:
            llm = "‚úÖ" if hasattr(pipeline, 'llm') and pipeline.llm else "‚ùå"
            st.metric("LLM", llm)
    else:
        st.warning("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# ===== SIDEBAR =====
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    if st.button("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É", use_container_width=True):
        st.cache_resource.clear()
        st.rerun()

    st.markdown("---")
    st.markdown("### üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")

    if pipeline_ready:
        components = [
            ("üî§ –≠–º–±–µ–¥–¥–µ—Ä", hasattr(pipeline, 'embedder') and pipeline.embedder),
            ("üìä –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å", hasattr(pipeline, 'vector_store') and pipeline.vector_store),
            ("üîç –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫", hasattr(pipeline, 'hybrid_search') and pipeline.hybrid_search),
            ("üéØ –†–µ—Ä–∞–Ω–∫–µ—Ä", hasattr(pipeline, 'reranker') and pipeline.reranker),
            ("ü§ñ LLM", hasattr(pipeline, 'llm') and pipeline.llm),
            ("üéôÔ∏è T-one ASR", asr is not None),
        ]

        for name, status in components:
            st.markdown(f"{'‚úÖ' if status else '‚ùå'} {name}")
    else:
        st.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞")

    st.markdown("---")
    st.markdown("### üéôÔ∏è –û T-one")
    st.caption("**T-one** ‚Äî –æ—Ç–∫—Ä—ã—Ç–∞—è ASR –º–æ–¥–µ–ª—å –æ—Ç –¢-–ë–∞–Ω–∫–∞")
    st.caption("‚Ä¢ 70M –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    st.caption("‚Ä¢ WER < 10% –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ")
    st.caption("‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ")
    st.caption("‚Ä¢ Open source (Apache 2.0)")

    st.markdown("üîó [GitHub](https://github.com/voicekit-team/T-one)")
    st.markdown("ü§ó [HuggingFace](https://huggingface.co/t-tech/T-one)")

    st.markdown("---")
    st.markdown("### üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    st.text("–ú–∞–∫—Å. —Ä–µ—Ü–µ–ø—Ç–æ–≤: 200")
    st.text("–ú–æ–¥–µ–ª—å: all-MiniLM-L6-v2")
    st.text("LLM: Qwen2.5-1.5B-Instruct")
